#!/usr/bin/python

from __future__ import division

import imp
import os
import subprocess
import sys
import time
import urlparse

config = imp.load_source ('config', '/etc/backup.conf')

def call (*args, **kwargs):
    kwargs['stdout'] = subprocess.PIPE
    kwargs['stderr'] = subprocess.STDOUT
    kwargs['close_fds'] = True
    p = subprocess.Popen (args, **kwargs)

    so, se = p.communicate ()
    for line in so.split ('\n'):
        if line!='': print '>', line
    if p.returncode != 0:
        raise Exception ('%s failed (status %i)' % (args[0], p.returncode))

class mount (object):
    def __init__ (self, device, target, ro = True):
        self.device = device
        self.target = target
        self.ro = ro

        if os.path.ismount (target):
            raise Exception ('"%s" already mounted' % (target))

    def __enter__ (self):
        call ('mount',
            '-o',
            'ro' if self.ro else 'rw',
            self.device,
            self.target)

        return self

    def __exit__ (self, exc_type, exc_val, exc_tb):
        if not os.path.ismount (self.target):
            raise Exception ('"%s" no longer mounted' % (self.target))
        call ('umount', self.target)

        return False

def backup_dir (name, dir):
    if not os.path.ismount (config.target_root):
        raise Exception ('%s not mounted' % (config.target_root))
    target_dir = os.path.join (config.target_root, date, name)

    if fi == 'full':
        os.mkdirs (target_dir)
    
    call ('duplicity',
        fi,
        '--exclude-other-filesystems',
        dir,
        urlparse.urljoin ('file:', target_dir))

def backup_lv (name, lv):
    lv_snap = '%sbackup' % (lv)

    if os.path.ismount (config.snapshot_mnt):
        raise Exception ('Mount point "%s" in use' % (config.snapshot_mnt))

    call ('lvcreate', '--quiet', '--size=1024M', '--snapshot', '--name=%s' % (lv_snap), lv)
    call ('mount', '-o', 'ro', '/dev/%s' % (lv_snap), config.snapshot_mnt)
    try:
        backup_dir (name, config.snapshot_mnt)
    finally:
        call ('umount', config.snapshot_mnt)
        call ('lvremove', '--quiet', '--force', lv_snap)

if __name__ == '__main__':
    # duplicity reads this from the environment
    os.environ['PASSPHRASE'] = config.passphrase

    date = time.strftime ('%G-%V')

    errors = 0

    # full or incremental?
    if len (sys.argv) != 2:
        print 'Backup type not specified; aborting.'
        sys.exit (1)
    fi = sys.argv[1]
    if sys.argv[1] not in ('full', 'incremental'):
        print 'Invalid backup type "%s"; aborting.' % (sys.argv[1])
        sys.exit (1)

    # run jobs
    for job in config.jobs:
        print '-' * 72
        print 'Backing up "%s"...' % (job['name'])

        try:
            if job['type'] == 'lv':
                backup_lv (job['name'], job['what'])
            elif job['type'] == 'dir':
                backup_dir (job['name'], job['what'])
            else:
                raise Exception ('Unknown job type "%s"' % (job['type']))
        except Exception, e:
            errors += 1
            sys.excepthook (*sys.exc_info ())

        print '\n',

    # report
    print '-' * 72
    print 'Process complete.'

    if errors > 0:
        print '%i job%s failed.' % (errors, errors != 1 and 's' or '')

    # remaining space
    if os.ismount (config.target_root):
        s = os.statvfs (config.target_root)
        size = s.f_frsize * s.f_blocks
        used = size - s.f_frsize * s.f_bfree
        print 'Used %i of %i MiB (%i%%).' % (used , size, '%d%%' % (used/size * 100))

    sys.exit (0 if errors == 0 else 1)
