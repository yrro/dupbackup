#!/usr/bin/python

jobs = ({'name': 'job1', 'type': 'lv',  'what': 'vg/lv'},
        {'name': 'job2', 'type': 'dir', 'what': '/somedir'})

passphrase = 'xyzzy'

ftp_host = 'foo'
ftp_user = 'bar'
ftp_pass = 'baz'
ftp_quota = 160000 # in MiB

# end of configuration

from __future__ import division

import ftplib
import os
import subprocess
import sys
import time

def call (*args, **kwargs):
    kwargs['stdout'] = subprocess.PIPE
    kwargs['stderr'] = subprocess.STDOUT
    kwargs['close_fds'] = True
    p = subprocess.Popen (args, **kwargs)

    so, se = p.communicate ()
    for line in so.split ('\n'):
        if line!='': print '>', line
    if p.returncode != 0:
        raise Exception ('%s failed (status %i)' % (args[0], p.returncode))

def backup_dir (name, dir):
    if fi == 'full':
        f = ftplib.FTP (ftp_host)
        f.login (ftp_user, ftp_pass)
        try:
            f.cwd ('%s' % (date))
        except ftplib.error_perm:
            f.mkd ('%s' % (date))
        f.cwd ('..')
        f.mkd ('%s/%s' % (date, name))
        f.quit ()
    
    call ('duplicity',
        '--%s' % (fi),
        '--volsize=%i' % (10),
        '--exclude-other-filesystems',
        dir,
        'ftp://%s@%s/%s/%s' % (ftp_user, ftp_host, date, name))

def backup_lv (name, lv):
    lv_snap = '%sbackup' % (lv)

    if os.path.ismount ('/mnt'):
        raise Exception ('Mount point /mnt in use')

    call ('lvcreate', '--quiet', '--size=1024M', '--snapshot', '--name=%s' % (lv_snap), lv)
    call ('mount', '-o', 'ro', '/dev/%s' % (lv_snap), '/mnt')
    try:
        backup_dir (name, '/mnt')
    finally:
        call ('umount', '/mnt')
        call ('lvremove', '--quiet', '--force', lv_snap)

if __name__ == '__main__':
    # duplicity reads these from the environment
    os.environ['FTP_PASSWORD'] = ftp_pass
    os.environ['PASSPHRASE'] = passphrase

    date = time.strftime ('%G-%V')

    errors = 0

    # full or incremental?
    try:
        if sys.argv[1] not in ('full', 'incremental'):
            print 'Invalid backup type "%s"; aborting.' % (sys.argv[1])
            sys.exit (1)
    except IndexError:
        print 'Backup type not specified; aborting.'
        sys.exit (1)
    fi = sys.argv[1]

    # run jobs
    for job in jobs:
        print '-' * 72
        print 'Backing up "%s"...' % (job['name'])

        try:
            if job['type'] == 'lv':
                backup_lv (job['name'], job['what'])
            elif job['type'] == 'dir':
                backup_dir (job['name'], job['what'])
            else:
                raise Exception ('Unknown job type "%s"' % (job['type']))
        except Exception, e:
            errors += 1
            sys.excepthook (*sys.exc_info ())

        print '\n',

    # report
    print '-' * 72
    print 'Process complete.'

    if errors > 0:
        print '%i job%s failed.' % (errors, errors != 1 and 's' or '')

    # remaining space
    p = subprocess.Popen ('lftp', stdin = subprocess.PIPE, stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    so, se = p.communicate (input = 'connect %s; user %s %s; du --summarize --megabytes .' % (ftp_host, ftp_user, ftp_pass))
    if p.returncode != 0:
        print 'Unable to calculate used backup space:'
        for line in se.split ('\n'):
            if line != '': print '>', line
    else:
        used = int (so.split ()[0])
        print 'Used %i of %i MiB (%i%%).' % (used, ftp_quota, int (used/ftp_quota * 100))

    sys.exit (errors and 1 or 0)
